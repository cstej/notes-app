{"version":3,"sources":["components/AddNode.js","components/Note.js","components/Noteslist.js","components/Search.js","components/Header.js","App.js","index.js"],"names":["AddNode","handleAddNote","useState","nodeText","setNodeText","characterLimit","className","rows","cols","placeholder","value","onChange","event","target","length","onClick","trim","Note","id","text","date","handleDeleteNote","size","Noteslist","notes","handlerDeleteAllNote","map","note","style","alignItems","display","justifyContent","Search","handleSearchNote","type","Header","handleToggleDarkMode","prevDarkMode","App","setNotes","useEffect","savedNotes","JSON","parse","localStorage","getItem","setItem","stringify","searchText","setSearchText","darkMode","setDarkMode","savedDarkMode","filter","toLocaleLowerCase","includes","Date","toLocaleDateString","newNote","nanoid","newNotes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8339009c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst AddNode = ({ handleAddNote }) => {\r\n  const [nodeText, setNodeText] = useState(\"\");\r\n\r\n  const handleTextChange = (event) => {\r\n    if (characterLimit - event.target.value.length >= 0) {\r\n      setNodeText(event.target.value);\r\n    }\r\n  };\r\n  const handleSaveClick = () => {\r\n    if (nodeText.trim().length > 0) {\r\n      handleAddNote(nodeText);\r\n      setNodeText(\"\");\r\n    }\r\n  };\r\n  const characterLimit = 400;\r\n  return (\r\n    <div className=\"note new\">\r\n      <textarea\r\n        rows=\"8\"\r\n        cols=\"10\"\r\n        placeholder=\"Type to add a note...\"\r\n        value={nodeText}\r\n        onChange={handleTextChange}\r\n      ></textarea>\r\n      <div className=\"note-footer\">\r\n        <small>{characterLimit - nodeText.length} remaining</small>\r\n        <button className=\"save\" onClick={handleSaveClick}>\r\n          {\" \"}\r\n          Save\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNode;\r\n","import React from \"react\";\r\nimport { MdDeleteForever } from \"react-icons/md\";\r\n\r\nconst Note = ({ id, text, date, handleDeleteNote }) => {\r\n  return (\r\n    <div className=\"note\">\r\n      <span>{text}</span>\r\n      <div className=\"note-footer\">\r\n        <small>{date}</small>\r\n        <MdDeleteForever\r\n          className=\"delete-icon\"\r\n          size=\"1.5em\"\r\n          onClick={() => handleDeleteNote(id)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\nimport AddNode from \"./AddNode\";\r\nimport Note from \"./Note\";\r\nconst Noteslist = ({\r\n  notes,\r\n  handleAddNote,\r\n  handleDeleteNote,\r\n  handlerDeleteAllNote,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div className=\"notes-list\">\r\n        {notes.map((note) => (\r\n          <Note\r\n            id={note.id}\r\n            text={note.text}\r\n            date={note.date}\r\n            handleDeleteNote={handleDeleteNote}\r\n          />\r\n        ))}\r\n        <AddNode handleAddNote={handleAddNote} />\r\n      </div>\r\n      <button\r\n        style={{\r\n          alignItems: \"center\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n        className=\"save\"\r\n        onClick={() => handlerDeleteAllNote()}\r\n      >\r\n        Delete All note\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Noteslist;\r\n","import React from \"react\";\r\n\r\nimport { MdSearch } from \"react-icons/md\";\r\nconst Search = ({ handleSearchNote }) => {\r\n  return (\r\n    <div className=\"search\">\r\n      <MdSearch className=\"search-icon\" size=\"1.3em\" />\r\n      <input\r\n        onChange={(event) => handleSearchNote(event.target.value)}\r\n        type=\"text\"\r\n        placeholder=\"search\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst Header = ({ handleToggleDarkMode }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Notes-App</h1>\r\n      <button\r\n        onClick={() => handleToggleDarkMode((prevDarkMode) => !prevDarkMode)}\r\n        className=\"save\"\r\n      >\r\n        Toggle Mode\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\nimport Noteslist from \"./components/Noteslist\";\nimport { nanoid } from \"nanoid\";\nimport Search from \"./components/Search\";\nimport Header from \"./components/Header\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n\n  // Notes Local Storage\n  useEffect(() => {\n    const savedNotes = JSON.parse(localStorage.getItem(\"react-notes-app-data\"));\n    if (savedNotes) {\n      setNotes(savedNotes);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"react-notes-app-data\", JSON.stringify(notes));\n  }, [notes]);\n\n  // UseState hook\n  const [searchText, setSearchText] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(false);\n\n  // DarkMode Local Storage\n  useEffect(() => {\n    const savedDarkMode = JSON.parse(\n      localStorage.getItem(\"darkModeToggle-data\")\n    );\n    if (savedDarkMode) {\n      setDarkMode(savedDarkMode);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"darkModeToggle-data\", JSON.stringify(darkMode));\n  }, [darkMode]);\n\n  // Adding Note\n  const addNode = (text) => {\n    const date = new Date().toLocaleDateString();\n    const newNote = {\n      id: nanoid(),\n      text: text,\n      date: date,\n    };\n    const newNotes = [...notes, newNote];\n    setNotes(newNotes);\n  };\n\n  // Deleteing a Note\n  const deleteNote = (id) => {\n    const newNote = notes.filter((note) => note.id !== id);\n    setNotes(newNote);\n  };\n  // Delete All Note\n  const deleteAllNote = () => {\n    setNotes([]);\n  };\n  return (\n    <div className={`${darkMode && `dark-mode`}`}>\n      <div className=\"container\">\n        <Header handleToggleDarkMode={setDarkMode} />\n        <Search handleSearchNote={setSearchText} />\n        <Noteslist\n          notes={notes.filter((note) =>\n            note.text.toLocaleLowerCase().includes(searchText)\n          )}\n          handleAddNote={addNode}\n          handleDeleteNote={deleteNote}\n          handlerDeleteAllNote={deleteAllNote}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}